import carla

# Verbindung zum CARLA-Server herstellen
client = carla.Client('localhost', 2000)
client.set_timeout(5.0)

# Weltobjekt abrufen
world = client.get_world()

# Zentrum und Radius des Kreises festlegen
circle_center = carla.Location(x=100.0, y=200.0, z=0.1)  # Koordinaten anpassen
circle_radius = 10.0  # Radius anpassen

# Material für den Kreis erstellen
material = carla.GetDefaultMaterial()

# Einen statischen Mesh-Actor für den Kreis erstellen
circle_actor = world.spawn_actor(
    carla.ActorBlueprintLibrary().find('static.prop.circle'),  # Verwenden Sie ein vordefiniertes Kreis-Mesh oder fügen Sie Ihr eigenes hinzu
    carla.Transform(circle_center),
    attach_to=None,
    attachment_type=carla.AttachmentType.Static,
    attributes=carla.ActorAttribute.make_replicated(material))

# Größe des Kreises anpassen (bei Bedarf)
circle_actor.scale = carla.Vector3D(x=circle_radius, y=circle_radius, z=0.1)

# Warten, um den Kreis zu sehen (optional)
input("Drücken Sie Enter, um das Programm zu beenden...")

# Kreis-Actor zerstören
circle_actor.destroy()



2:
import carla

# Verbindung zum CARLA-Server herstellen
client = carla.Client('localhost', 2000)
client.set_timeout(5.0)

# Weltobjekt abrufen
world = client.get_world()

# Zentrum und Radius des Kreises festlegen
circle_center = carla.Location(x=100.0, y=200.0, z=0.1)  # Koordinaten anpassen
circle_radius = 10.0  # Radius anpassen

# Einen statischen Mesh-Actor für den Kreis erstellen
circle_actor = world.spawn_actor(
    carla.ActorBlueprintLibrary().find('static.prop.circle'),  # Verwenden Sie ein vordefiniertes Kreis-Mesh oder fügen Sie Ihr eigenes hinzu
    carla.Transform(circle_center),
    attach_to=None,
    attachment_type=carla.AttachmentType.Static)

# Größe des Kreises anpassen (bei Bedarf)
circle_actor.scale = carla.Vector3D(x=circle_radius, y=circle_radius, z=0.1)

# Warten, um den Kreis zu sehen (optional)
input("Drücken Sie Enter, um das Programm zu beenden...")

# Kreis-Actor zerstören
circle_actor.destroy()

